# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# WEB
### NoDocs ###
GET     /                                                  controllers.WebController.index
### NoDocs ###
GET     /refresh                                           controllers.WebController.refresh
### NoDocs ###
GET     /search                                            controllers.WebController.search
### NoDocs ###
GET     /brands                                            controllers.WebController.brands
### NoDocs ###
GET     /best                                              controllers.WebController.best
### NoDocs ###
GET     /marketing                                         controllers.WebController.marketing
### NoDocs ###
GET     /about                                             controllers.WebController.about
### NoDocs ###
GET     /admin                                             controllers.WebController.admin
### NoDocs ###
GET     /sitemap.xml                                       controllers.WebController.sitemap

# STRAVA AUTH
### NoDocs ###
GET     /login/strava                                      controllers.auth.StravaController.login()
### NoDocs ###
GET     /authorize/strava                                  controllers.auth.StravaController.authorize
### NoDocs ###
GET     /fe/oauth/strava                                   controllers.auth.StravaController.feAuthorize
### NoDocs ###
POST    /api/token/strava                                  controllers.auth.StravaController.feToken
### NoDocs ###
GET     /logout/strava                                     controllers.auth.StravaController.logout

# WITHINGS AUTH
### NoDocs ###
GET     /login/withings                                    controllers.auth.WithingsController.login(scope: String)
### NoDocs ###
GET     /authorize/withings                                controllers.auth.WithingsController.authorize

### NoDocs ###
GET     /api/ws                                            controllers.ApiController.ws

### NoDocs ###
GET     /api/admin/status                                  controllers.AdminController.status

### NoDocs ###
+ nocsrf
POST    /api/admin/brand/upload                            controllers.AdminController.brandUpload

###
#  summary: Retrieves the status of the system, versions of the libraries
#  tags:
#    - status
#  responses:
#    200:
#      description: status information about the system
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/velocorner.api.StatusInfo'
###
GET     /api/status                                        controllers.ApiController.status

###
#  summary: Collects ping notification
#  tags:
#    - status
#  parameters:
#    - name: body
#      schema:
#        $ref: '#/components/schemas/velocorner.api.Ping'
#  responses:
#    200:
#      description: information has been collected
###
POST    /api/ping                                          controllers.ApiController.ping

###
#  summary: Collects ping notification
#  tags:
#    - status
#  responses:
#    200:
#      description: information has been collected
###
GET     /api/ping                                          controllers.ApiController.ping

###
#  summary: Stores preferences for units of measurement
#  tags:
#    - athlete
#  responses:
#    200:
#      description: Successfully stored
###
+nocsrf
PUT      /api/athletes/units/:unit                         controllers.ProfileController.unit(unit: String)

###
#  summary: Retrieves selected year's statistics for the logged in athlete
#  tags:
#    - activity
#  responses:
#    200:
#      description: Returns the yearly statistics
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/velocorner.api.ProfileStatistics'
###
GET     /api/athletes/statistics/profile/:activity/:year   controllers.ActivityController.profile(activity: String, year: String)

###
#  summary: Lists yearly series for the logged in athlete
#  tags:
#    - activity
#  responses:
#    200:
#      description: Returns the yearly series for heatmap, distance or elevation
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/velocorner.api.chart.DailySeries'
#    404:
#      description: Not found
###
GET     /api/athletes/statistics/yearly/:action/:activity  controllers.ActivityController.yearlyStatistics(action: String, activity: String)

###
#  summary: Lists yearly series with sample data
#  tags:
#    - demo
#  responses:
#    200:
#      description: Returns the yearly series for heatmap, distance or elevation
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/velocorner.api.chart.DailySeries'
#    404:
#      description: Not found
###
GET     /api/demo/statistics/yearly/:action/:activity     controllers.DemoController.yearlyStatistics(action: String, activity: String)

###
#  summary: Lists year to date series for the logged in athlete
#  tags:
#    - activity
#  responses:
#    200:
#      description: Returns the year to date series for distance and elevation
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/velocorner.api.chart.DailySeries'
#    404:
#      description: Not found
###
GET     /api/athletes/statistics/ytd/:action/:activity     controllers.ActivityController.ytdStatistics(action: String, activity: String)

###
#  summary: Lists year to date series with sample data to demo the capabilities of the site
#  tags:
#    - demo
#  responses:
#    200:
#      description: Returns the year to date series for distance and elevation
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/velocorner.api.chart.DailySeries'
#    404:
#      description: Not found
###
GET     /api/demo/statistics/ytd/:action/:activity         controllers.DemoController.ytdStatistics(action: String, activity: String)

###
#  summary: Lists all daily activities for the logged in athlete from the last 12 months
#  tags:
#    - activity
#  responses:
#    200:
#      description: Returns all daily activities for distance and elevation from the last 12 months
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/velocorner.api.chart.DailyPoint'
#    404:
#      description: Not found
###
GET     /api/athletes/statistics/daily/:action             controllers.ActivityController.dailyStatistics(action: String)

###
#  summary: Lists demo daily activities for the last 12 months
#  tags:
#    - demo
#  responses:
#    200:
#      description: Returns demo daily activities for distance and elevation from the last 12 months
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/velocorner.api.chart.DailyPoint'
###
GET     /api/demo/statistics/daily/:action                 controllers.DemoController.dailyStatistics(action: String)

###
#  summary: Lists yearly histogram for distance and elevation for the logged in athlete
#  tags:
#    - activity
#  responses:
#    200:
#      description: Returns the yearly histogram for distance and elevation
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/velocorner.api.heatmap.HeatmapSeries'
#    404:
#      description: Not found
###
GET     /api/athletes/statistics/histogram/:action/:activity     controllers.ActivityController.yearlyHistogram(action: String, activity: String)

###
#  summary: Lists demo yearly histogram for distance and elevation
#  tags:
#    - demo
#  responses:
#    200:
#      description: Returns a demo yearly histogram for distance and elevation
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/velocorner.api.heatmap.HeatmapSeries'
#    404:
#      description: Not found
###
GET     /api/demo/statistics/histogram/:action/:activity         controllers.DemoController.yearlyHistogram(action: String, activity: String)

###
#  summary: Lists top 10 activities for distance and elevation for the logged in athlete
#  tags:
#    - activity
#  responses:
#    200:
#      description: Returns a list of top 10 activities
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/velocorner.api.strava.Activity'
###
GET     /api/athletes/statistics/top/:action/:activity           controllers.ActivityController.top(action: String, activity: String)


###
#  summary: List of achievements for the logged in athlete
#  tags:
#    - activity
#  responses:
#    200:
#      description: Extracts max speed, longest ride, etc.
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/velocorner.api.Achievements'
#    404:
#      description: Not found
###
GET     /api/athletes/statistics/achievements/:activity    controllers.ActivityController.achievements(activity: String)

###
#  summary: Suggests a list of activities based on the query parameter
#  tags:
#    - search
#  responses:
#    200:
#      description: Returns a list of activities
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/velocorner.api.strava.Activity'
###
GET     /api/activities/suggest                            controllers.ActivityController.suggest(query: String)

###
#  summary: List of activity titles with occurrences
#  tags:
#    - search
#  responses:
#    200:
#      description: Returns a word cloud
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/velocorner.api.wordcloud.WordCloud'
###
GET     /api/activities/wordcloud                          controllers.ActivityController.wordcloud()

###
#  summary: List of sample activity titles with occurrences
#  tags:
#    - demo
#  responses:
#    200:
#      description: Returns a word cloud
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/velocorner.api.wordcloud.WordCloud'
###
GET     /api/demo/wordcloud                                controllers.DemoController.wordcloud()

###
#  summary: List all the distinct activity types for the logged in user. (Ride, Run, etc.)
#  tags:
#    - activity
#  responses:
#    200:
#      description: Returns a list of activity types ordered by frequency
#      content:
#        application/json:
#          schema:
#            type: array
#            items: string
#    403:
#      description: Forbidden
###
GET     /api/activities/types                              controllers.ActivityController.activityTypes

###
#  summary: List all the years when activities were uploaded for a specific type (Ride, Run, etc.)
#  tags:
#    - activity
#  responses:
#    200:
#      description: Returns a list of activity years for a given type, ordered by year,
#      content:
#        application/json:
#          schema:
#            type: array
#            items: string
#    403:
#      description: Forbidden
###
GET     /api/activities/:activity/years                    controllers.ActivityController.activityYears(activity: String)

###
#  summary: Retrieves the last activity of the logged in user
#  tags:
#    - activity
#  responses:
#    200:
#      description: Returns an activity based on id
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/velocorner.api.strava.Activity'
#    403:
#      description: Forbidden
#    404:
#      description: Not found
#    500:
#      description: Internal error
###
GET     /api/activities/last                               controllers.ActivityController.last()

###
#  summary: Retrieves an activity
#  tags:
#    - activity
#  responses:
#    200:
#      description: Returns an activity based on id
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/velocorner.api.strava.Activity'
#    403:
#      description: Forbidden
#    404:
#      description: Not found
#    500:
#      description: Internal error
###
GET     /api/activities/:id                                controllers.ActivityController.activity(id: Long)

###
#  summary: Retrieves the weather forecast for a specific place
#  tags:
#    - weather
#  parameters:
#    - in: path
#      name: location
#      required: true
#      schema:
#        type: string
#      example: Zurich, Switzerland
#      description: City and country of the forecast, comma separated
#  responses:
#    200:
#      description: Weather forecast for the next 5 days
#      content:
#        application/xml:
#          schema:
#            type: string
#    400:
#      description: Bad request
#    404:
#      description: Place not found
#    500:
#      description: Internal error
###
GET     /api/weather/forecast/:location                    controllers.WeatherController.forecast(location: String)

###
#  summary: Retrieves the sunrise and sunset information for a specific place
#  tags:
#    - weather
#  parameters:
#    - in: path
#      name: location
#      required: true
#      schema:
#        type: string
#      example: Zurich, Switzerland
#      description: City and country of the forecast, comma separated
#  responses:
#    200:
#      description: Sunrise, sunset
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/velocorner.api.weather.CurrentWeather'
#    400:
#      description: Bad request
#    404:
#      description: Place not found
#    500:
#      description: Internal error
###
GET     /api/weather/current/:location                     controllers.WeatherController.current(location: String)

###
#  summary: Suggests a list of locations based on the query parameter
#  tags:
#    - location
#  parameters:
#    - in: query
#      name: query
#      required: true
#      schema:
#        type: string
#      example: Zur
#      description: partial location name
#  responses:
#    200:
#      description: Returns a list of matching locations
#      content:
#        application/json:
#          schema:
#            type: array
#            items: string
###
GET     /api/location/suggest                              controllers.LocationController.suggest(query: String)


###
#  summary: Retrieves the geo position (lat, long) based on the location
#  tags:
#    - location
#  parameters:
#    - in: path
#      name: location
#      required: true
#      schema:
#        type: string
#      example: Zurich, Switzerland or Zurich, CH
#      description: City and country of the location, comma separated
#  responses:
#    200:
#      description: latitude, longitude
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/velocorner.api.GeoPosition'
#    404:
#      description: Location not found
###
GET     /api/location/geo/:location                        controllers.LocationController.geo(location: String)

###
#  summary: Retrieves the nearest city, country based on IP address
#  tags:
#    - location
#  responses:
#    200:
#      description: detected city and country
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/velocorner.api.GeoLocation'
#    404:
#      description: Location not found
###
GET     /api/location/ip                                   controllers.LocationController.ip()

###
#  summary: Suggests a list of brands based on the query parameter
#  tags:
#    - brand
#  parameters:
#    - in: query
#      name: query
#      required: true
#      schema:
#        type: string
#      example: Shima
#      description: search term
#  responses:
#    200:
#      description: Returns a list of brands
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#               $ref: '#/components/schemas/velocorner.api.brand.MarketplaceBrand'
###
GET     /api/brands/suggest                                controllers.BrandsController.suggest(query: String)

###
#  summary: Lookup for a list of brands based on the search parameter
#  tags:
#    - brand
#  parameters:
#    - in: query
#      name: query
#      required: true
#      schema:
#        type: string
#      example: Shimano break pads
#      description: search term
#  responses:
#    200:
#      description: Returns a list of brands
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#               $ref: '#/components/schemas/velocorner.api.brand.MarketplaceBrand'
###
GET     /api/brands/search                                 controllers.BrandsController.search(query: String)

###
#  summary: Suggests a list of product names based on the query parameter
#  tags:
#    - product
#  parameters:
#    - in: query
#      name: query
#      required: true
#      schema:
#        type: string
#      example: SRAM XX1
#      description: search term
#  responses:
#    200:
#      description: Returns a list of product names
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#               string
###
GET     /api/products/suggest                              controllers.ProductsController.suggest(query: String)

###
#  summary: Lookup for a products based on the search parameter
#  tags:
#    - product
#  parameters:
#    - in: query
#      name: query
#      required: true
#      schema:
#        type: string
#      example: SRAM XX1
#      description: search term
#  responses:
#    200:
#      description: Returns a list of product details with prices
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#               $ref: '#/components/schemas/velocorner.api.brand.ProductDetails'
###
GET     /api/products/search                               controllers.ProductsController.search(query: String)

###
#  summary: List of supported markerplaces
#  tags:
#    - product
#  responses:
#    200:
#      description: Returns a list of marketplaces
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#               $ref: '#/components/schemas/velocorner.api.brand.Marketplace'
###
GET     /api/products/markets                              controllers.ProductsController.markets()

###
#  summary: Exchange rates
#  tags:
#    - rates
#  parameters:
#    - in: path
#      name: base
#      required: true
#      schema:
#        type: string
#      example: CHF
#      description: base currency for conversion
#    - in: path
#      name: counter
#      required: true
#      schema:
#        type: string
#      example: EUR
#      description: counter currency for conversion
#  responses:
#    200:
#      description: conversion rate
#      content:
#        application/json:
#          schema:
#            type: number
###
GET     /api/rates/:base/:counter                          controllers.RatesController.rates(base: String, counter: String)

# DOC
### NoDocs ###
GET     /swagger.json                                      controllers.Assets.at(path="/public", file="swagger.json")
### NoDocs ###
GET     /docs                                              controllers.Assets.at(path="/public", file="swagger-ui/index.html")

# Map static resources from the /public folder to the /assets URL path
### NoDocs ###
GET     /robots.txt                                        controllers.Assets.at(path="/public", file="html/robots.txt")
### NoDocs ###
GET     /counter                                           controllers.Assets.at(path="/public", file="html/counter.html")
### NoDocs ###
GET     /googlea6d3ef59293b5121.html                       controllers.Assets.at(path="/public", file="html/googlea6d3ef59293b5121.html")
### NoDocs ###
GET     /googlea6d3ef59293b5121                            controllers.Assets.at(path="/public", file="html/googlea6d3ef59293b5121.html")
### NoDocs ###
GET     /assets/*file                                      controllers.Assets.at(path="/public", file)
