# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# WEB
### NoDocs ###
GET     /                                                  controllers.WebController.index
### NoDocs ###
GET     /refresh                                           controllers.WebController.refresh
### NoDocs ###
GET     /search                                            controllers.WebController.search
### NoDocs ###
GET     /about                                             controllers.WebController.about
### NoDocs ###
GET     /admin                                             controllers.WebController.admin

# STRAVA AUTH
### NoDocs ###
GET     /login/strava                                      controllers.auth.StravaController.login(scope: String)
### NoDocs ###
GET     /api/login/strava                                  controllers.auth.StravaController.apiLogin
### NoDocs ###
GET     /authorize/strava                                  controllers.auth.StravaController.authorize
### NoDocs ###
GET     /logout/strava                                     controllers.auth.StravaController.logout

# WITHINGS AUTH
### NoDocs ###
GET     /login/withings                                    controllers.auth.WithingsController.login(scope: String)
### NoDocs ###
GET     /authorize/withings                                controllers.auth.WithingsController.authorize

### NoDocs ###
GET     /ws                                                controllers.ApiController.ws

### NoDocs ###
GET     /api/admin/status                                  controllers.AdminController.status

###
#  summary: Retrieves the status of the system, versions of the libraries
#  tags:
#    - status
#  responses:
#    200:
#      description: status information about the system
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/velocorner.api.StatusInfo'
###
GET     /api/status                                        controllers.ApiController.status

###
#  summary: Collects ping notification
#  tags:
#    - status
#  post:
#    requestBody:
#      required: true
#      content:
#        application/json:
#          schema:
#             $ref: '#/components/schemas/velocorner.api.Ping'
#  responses:
#    200:
#      description: information has been collected
###
POST    /api/ping/                                         controllers.ApiController.ping

###
#  summary: Retrieves current year's statistics for the logged in athlete
#  tags:
#    - activity
#  responses:
#    200:
#      description: Returns the yearly statistics
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/velocorner.api.ProfileStatistics'
###
GET     /api/athletes/statistics/profile/:activity         controllers.ActivityController.ytdProfile(activity: String)

###
#  summary: Lists yearly series for the logged in athlete
#  tags:
#    - activity
#  responses:
#    200:
#      description: Returns the yearly series for heatmap, distance or elevation
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/velocorner.api.chart.DailySeries'
#    404:
#      description: Not found
###
GET     /api/athletes/statistics/yearly/:action/:activity  controllers.ActivityController.yearlyStatistics(action: String, activity: String)

###
#  summary: Lists year to date series for the logged in athlete
#  tags:
#    - activity
#  responses:
#    200:
#      description: Returns the year to date series for distance and elevation
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/velocorner.api.chart.DailySeries'
#    404:
#      description: Not found
###
GET     /api/athletes/statistics/ytd/:action/:activity     controllers.ActivityController.ytdStatistics(action: String, activity: String)

###
#  summary: Lists daily activities for the logged in athlete
#  tags:
#    - activity
#  responses:
#    200:
#      description: Returns the daily activities for distance and elevation
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/velocorner.api.chart.DailyPoint'
#    404:
#      description: Not found
###
GET     /api/athletes/statistics/daily/:action/:activity        controllers.ActivityController.dailyStatistics(action: String, activity: String)

###
#  summary: Lists yearly histogram for distance and elevation for the logged in athlete
#  tags:
#    - activity
#  responses:
#    200:
#      description: Returns the yearly histogram for distance and elevation
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/velocorner.api.heatmap.HeatmapSeries'
#    404:
#      description: Not found
###
GET     /api/athletes/statistics/histogram/:action/:activity     controllers.ActivityController.yearlyHistogram(action: String, activity: String)


###
#  summary: List of achievements for the logged in athlete
#  tags:
#    - activity
#  responses:
#    200:
#      description: Extracts max speed, longest ride, etc.
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/velocorner.api.Achievements'
#    404:
#      description: Not found
###
GET     /api/athletes/statistics/achievements/:activity    controllers.ActivityController.achievements(activity: String)

###
#  summary: Suggests a list of activities based on the query parameter
#  tags:
#    - activity
#  responses:
#    200:
#      description: Returns a list of activities
#      content:
#        application/json:
#          schema:
#            type: array
#            items:
#              $ref: '#/components/schemas/velocorner.api.strava.Activity'
###
GET     /api/activities/suggest                            controllers.ActivityController.suggest(query: String)

###
#  summary: List all the distinct activity types for the logged in user. (Ride, Run, etc.)
#  tags:
#    - activity
#  responses:
#    200:
#      description: Returns a list of activity types ordered by frequency
#      content:
#        application/json:
#          schema:
#            type: array
#            items: string
#    404:
#      description: Not found
###
GET     /api/activities/type                               controllers.ActivityController.activityTypes

###
#  summary: Retrieves an activity
#  tags:
#    - activity
#  responses:
#    200:
#      description: Returns an activity based on id
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/velocorner.api.strava.Activity'
#    403:
#      description: Forbidden
#    404:
#      description: Not found
#    500:
#      description: Internal error
###
GET     /api/activities/:id                                controllers.ActivityController.activity(id: Long)

###
#  summary: Retrieves the weather forecast for a specific place
#  tags:
#    - weather
#  parameters:
#    - in: path
#      name: location
#      required: true
#      schema:
#        type: string
#      example: Zurich, Switzerland
#      description: City and country of the forecast, comma separated
#    - in: query
#      name: mode
#      schema:
#        type: string
#        enum: [json, xml]
#        example: json
#      description: Formats the content type optimized for meteogram widget if set to xml
#  responses:
#    200:
#      description: Weather forecast for the next 5 days
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/velocorner.api.weather.DailyWeather'
#    400:
#      description: Bad request
#    404:
#      description: Place not found
#    500:
#      description: Internal error
###
GET     /api/weather/forecast/:location                    controllers.WeatherController.forecast(location: String)

###
#  summary: Retrieves the sunrise and sunset information for a specific place
#  tags:
#    - weather
#  parameters:
#    - in: path
#      name: location
#      required: true
#      schema:
#        type: string
#      example: Zurich, Switzerland
#      description: City and country of the forecast, comma separated
#  responses:
#    200:
#      description: Sunrise, sunset
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/velocorner.api.weather.SunriseSunset'
#    400:
#      description: Bad request
#    404:
#      description: Place not found
#    500:
#      description: Internal error
###
GET     /api/weather/sunrise/:location                     controllers.WeatherController.sunrise(location: String)

###
#  summary: Suggests a list of locations based on the query parameter
#  tags:
#    - weather
#  responses:
#    200:
#      description: Returns a list of activities
#      content:
#        application/json:
#          schema:
#            type: array
#            items: string
###
GET     /api/weather/suggest                               controllers.WeatherController.suggest(query: String)

###
#  summary: Retrieves the geo position (lat, long) based on the location
#  tags:
#    - location
#  parameters:
#    - in: path
#      name: location
#      required: true
#      schema:
#        type: string
#      example: Zurich, Switzerland
#      description: City and country of the location, comma separated
#  responses:
#    200:
#      description: latitude, longitude
#      content:
#        application/json:
#          schema:
#            $ref: '#/components/schemas/velocorner.api.GeoPosition'
#    404:
#      description: Location not found
###
GET     /api/location/geo/:location                        controllers.LocationController.geo(location: String)


# DOC
### NoDocs ###
GET     /swagger.json                                      controllers.Assets.at(path="/public", file="swagger.json")
### NoDocs ###
GET     /docs                                              controllers.Assets.at(path="/public", file="swagger-ui/index.html")

# Map static resources from the /public folder to the /assets URL path
### NoDocs ###
GET     /counter                                           controllers.Assets.at(path="/public", file="html/counter.html")
### NoDocs ###
GET     /googlea6d3ef59293b5121.html                       controllers.Assets.at(path="/public", file="html/googlea6d3ef59293b5121.html")
### NoDocs ###
GET     /googlea6d3ef59293b5121                            controllers.Assets.at(path="/public", file="html/googlea6d3ef59293b5121.html")
### NoDocs ###
GET     /assets/*file                                      controllers.Assets.at(path="/public", file)
